get:
  description: List the folders.
  operationId: getFolders
  parameters:
    - $ref: "../../#/components/parameters/Fields"
    - $ref: "../../#/components/parameters/Limit"
    - $ref: "../../#/components/parameters/Offset"
    - $ref: "../../#/components/parameters/Sort"
    - $ref: "../../#/components/parameters/Single"
    - $ref: "../../#/components/parameters/Filter"
    - $ref: "../../#/components/parameters/search"
    - $ref: "../../#/components/parameters/Meta"
  responses:
    "200":
      description: Successful request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "../../#/components/schemas/Folder"
    "401":
      $ref: "../../#/components/responses/UnauthorizedError"
    "404":
      $ref: "../../#/components/responses/NotFoundError"
  tags:
    - Folders
post:
  description: Create a new folder.
  operationId: createFolder
  parameters:
    - $ref: "../../#/components/parameters/Fields"
    - $ref: "../../#/components/parameters/Meta"
  requestBody:
    content:
      application/json:
        schema:
          type: object
          properties:
            name:
              type: string
              example: Amsterdam
              description: Name of the folder.
            parent:
              description: Unique identifier of the parent folder. This allows for nested folders.
              type: integer
          required: [name]
  responses:
    "200":
      description: Successful request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "../../#/components/schemas/Folder"
    "401":
      $ref: "../../#/components/responses/UnauthorizedError"
    "404":
      $ref: "../../#/components/responses/NotFoundError"
  tags:
  - Folders
